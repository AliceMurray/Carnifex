// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scoreboard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scoreboard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace wire {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
struct MessageOneofInstance {
  const ::wire::Event* event_;
  const ::wire::ContestSetup* setup_;
}* Message_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContestSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContestSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Problem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Problem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_scoreboard_2eproto() {
  protobuf_AddDesc_scoreboard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scoreboard.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, setup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, MessageType_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      Message_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Event_descriptor_ = file->message_type(1);
  static const int Event_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, problem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, submitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, unfrozen_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  ContestSetup_descriptor_ = file->message_type(2);
  static const int ContestSetup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContestSetup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContestSetup, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContestSetup, problems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContestSetup, start_),
  };
  ContestSetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContestSetup_descriptor_,
      ContestSetup::default_instance_,
      ContestSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContestSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContestSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContestSetup));
  Problem_descriptor_ = file->message_type(3);
  static const int Problem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, color_),
  };
  Problem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Problem_descriptor_,
      Problem::default_instance_,
      Problem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Problem));
  Team_descriptor_ = file->message_type(4);
  static const int Team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team, name_),
  };
  Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_descriptor_,
      Team::default_instance_,
      Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team));
  SState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scoreboard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContestSetup_descriptor_, &ContestSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Problem_descriptor_, &Problem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_descriptor_, &Team::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_scoreboard_2eproto() {
  delete Message::default_instance_;
  delete Message_default_oneof_instance_;
  delete Message_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete ContestSetup::default_instance_;
  delete ContestSetup_reflection_;
  delete Problem::default_instance_;
  delete Problem_reflection_;
  delete Team::default_instance_;
  delete Team_reflection_;
}

void protobuf_AddDesc_scoreboard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020scoreboard.proto\022\004wire\"[\n\007Message\022\034\n\005e"
    "vent\030\001 \001(\0132\013.wire.EventH\000\022#\n\005setup\030\002 \001(\013"
    "2\022.wire.ContestSetupH\000B\r\n\013MessageType\"\210\001"
    "\n\005Event\022\014\n\004Team\030\006 \002(\003\022\017\n\007Problem\030\001 \002(\003\022\023"
    "\n\013SubmitCount\030\002 \002(\003\022\017\n\007Penalty\030\003 \002(\003\022\033\n\005"
    "State\030\004 \002(\0162\014.wire.SState\022\035\n\010Unfrozen\030\005 "
    "\001(\0132\013.wire.Event\"g\n\014ContestSetup\022\014\n\004Name"
    "\030\001 \002(\t\022\031\n\005Teams\030\002 \003(\0132\n.wire.Team\022\037\n\010Pro"
    "blems\030\003 \003(\0132\r.wire.Problem\022\r\n\005Start\030\004 \002("
    "\003\"3\n\007Problem\022\n\n\002Id\030\001 \002(\003\022\r\n\005Label\030\002 \002(\t\022"
    "\r\n\005Color\030\003 \001(\t\" \n\004Team\022\n\n\002Id\030\001 \002(\003\022\014\n\004Na"
    "me\030\002 \002(\t*8\n\006SState\022\013\n\007CORRECT\020\001\022\t\n\005WRONG"
    "\020\002\022\013\n\007PENDING\020\003\022\t\n\005FIRST\020\004", 506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scoreboard.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message_default_oneof_instance_ = new MessageOneofInstance;
  Event::default_instance_ = new Event();
  ContestSetup::default_instance_ = new ContestSetup();
  Problem::default_instance_ = new Problem();
  Team::default_instance_ = new Team();
  Message::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ContestSetup::default_instance_->InitAsDefaultInstance();
  Problem::default_instance_->InitAsDefaultInstance();
  Team::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scoreboard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scoreboard_2eproto {
  StaticDescriptorInitializer_scoreboard_2eproto() {
    protobuf_AddDesc_scoreboard_2eproto();
  }
} static_descriptor_initializer_scoreboard_2eproto_;
const ::google::protobuf::EnumDescriptor* SState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SState_descriptor_;
}
bool SState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kEventFieldNumber;
const int Message::kSetupFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wire.Message)
}

void Message::InitAsDefaultInstance() {
  Message_default_oneof_instance_->event_ = const_cast< ::wire::Event*>(&::wire::Event::default_instance());
  Message_default_oneof_instance_->setup_ = const_cast< ::wire::ContestSetup*>(&::wire::ContestSetup::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wire.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_MessageType();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:wire.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_MessageType()) {
    clear_MessageType();
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scoreboard_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::clear_MessageType() {
  switch(MessageType_case()) {
    case kEvent: {
      delete MessageType_.event_;
      break;
    }
    case kSetup: {
      delete MessageType_.setup_;
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void Message::Clear() {
  clear_MessageType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wire.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .wire.Event event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_setup;
        break;
      }

      // optional .wire.ContestSetup setup = 2;
      case 2: {
        if (tag == 18) {
         parse_setup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wire.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wire.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wire.Message)
  // optional .wire.Event event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(), output);
  }

  // optional .wire.ContestSetup setup = 2;
  if (has_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->setup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wire.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wire.Message)
  // optional .wire.Event event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(), target);
  }

  // optional .wire.ContestSetup setup = 2;
  if (has_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->setup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wire.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  switch (MessageType_case()) {
    // optional .wire.Event event = 1;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
      break;
    }
    // optional .wire.ContestSetup setup = 2;
    case kSetup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setup());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.MessageType_case()) {
    case kEvent: {
      mutable_event()->::wire::Event::MergeFrom(from.event());
      break;
    }
    case kSetup: {
      mutable_setup()->::wire::ContestSetup::MergeFrom(from.setup());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  if (has_event()) {
    if (!this->event().IsInitialized()) return false;
  }
  if (has_setup()) {
    if (!this->setup().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(MessageType_, other->MessageType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kTeamFieldNumber;
const int Event::kProblemFieldNumber;
const int Event::kSubmitCountFieldNumber;
const int Event::kPenaltyFieldNumber;
const int Event::kStateFieldNumber;
const int Event::kUnfrozenFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wire.Event)
}

void Event::InitAsDefaultInstance() {
  unfrozen_ = const_cast< ::wire::Event*>(&::wire::Event::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wire.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  team_ = GOOGLE_LONGLONG(0);
  problem_ = GOOGLE_LONGLONG(0);
  submitcount_ = GOOGLE_LONGLONG(0);
  penalty_ = GOOGLE_LONGLONG(0);
  state_ = 1;
  unfrozen_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:wire.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete unfrozen_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scoreboard_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Event*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(team_, penalty_);
    state_ = 1;
    if (has_unfrozen()) {
      if (unfrozen_ != NULL) unfrozen_->::wire::Event::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wire.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Problem = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &problem_)));
          set_has_problem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SubmitCount;
        break;
      }

      // required int64 SubmitCount = 2;
      case 2: {
        if (tag == 16) {
         parse_SubmitCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &submitcount_)));
          set_has_submitcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Penalty;
        break;
      }

      // required int64 Penalty = 3;
      case 3: {
        if (tag == 24) {
         parse_Penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &penalty_)));
          set_has_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_State;
        break;
      }

      // required .wire.SState State = 4;
      case 4: {
        if (tag == 32) {
         parse_State:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wire::SState_IsValid(value)) {
            set_state(static_cast< ::wire::SState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Unfrozen;
        break;
      }

      // optional .wire.Event Unfrozen = 5;
      case 5: {
        if (tag == 42) {
         parse_Unfrozen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unfrozen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Team;
        break;
      }

      // required int64 Team = 6;
      case 6: {
        if (tag == 48) {
         parse_Team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wire.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wire.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wire.Event)
  // required int64 Problem = 1;
  if (has_problem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->problem(), output);
  }

  // required int64 SubmitCount = 2;
  if (has_submitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->submitcount(), output);
  }

  // required int64 Penalty = 3;
  if (has_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->penalty(), output);
  }

  // required .wire.SState State = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional .wire.Event Unfrozen = 5;
  if (has_unfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->unfrozen(), output);
  }

  // required int64 Team = 6;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wire.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wire.Event)
  // required int64 Problem = 1;
  if (has_problem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->problem(), target);
  }

  // required int64 SubmitCount = 2;
  if (has_submitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->submitcount(), target);
  }

  // required int64 Penalty = 3;
  if (has_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->penalty(), target);
  }

  // required .wire.SState State = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional .wire.Event Unfrozen = 5;
  if (has_unfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->unfrozen(), target);
  }

  // required int64 Team = 6;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wire.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 Team = 6;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team());
    }

    // required int64 Problem = 1;
    if (has_problem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->problem());
    }

    // required int64 SubmitCount = 2;
    if (has_submitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->submitcount());
    }

    // required int64 Penalty = 3;
    if (has_penalty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->penalty());
    }

    // required .wire.SState State = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .wire.Event Unfrozen = 5;
    if (has_unfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unfrozen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_problem()) {
      set_problem(from.problem());
    }
    if (from.has_submitcount()) {
      set_submitcount(from.submitcount());
    }
    if (from.has_penalty()) {
      set_penalty(from.penalty());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_unfrozen()) {
      mutable_unfrozen()->::wire::Event::MergeFrom(from.unfrozen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_unfrozen()) {
    if (!this->unfrozen().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(problem_, other->problem_);
    std::swap(submitcount_, other->submitcount_);
    std::swap(penalty_, other->penalty_);
    std::swap(state_, other->state_);
    std::swap(unfrozen_, other->unfrozen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContestSetup::kNameFieldNumber;
const int ContestSetup::kTeamsFieldNumber;
const int ContestSetup::kProblemsFieldNumber;
const int ContestSetup::kStartFieldNumber;
#endif  // !_MSC_VER

ContestSetup::ContestSetup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wire.ContestSetup)
}

void ContestSetup::InitAsDefaultInstance() {
}

ContestSetup::ContestSetup(const ContestSetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wire.ContestSetup)
}

void ContestSetup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContestSetup::~ContestSetup() {
  // @@protoc_insertion_point(destructor:wire.ContestSetup)
  SharedDtor();
}

void ContestSetup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ContestSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContestSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContestSetup_descriptor_;
}

const ContestSetup& ContestSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scoreboard_2eproto();
  return *default_instance_;
}

ContestSetup* ContestSetup::default_instance_ = NULL;

ContestSetup* ContestSetup::New() const {
  return new ContestSetup;
}

void ContestSetup::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    start_ = GOOGLE_LONGLONG(0);
  }
  teams_.Clear();
  problems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContestSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wire.ContestSetup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Teams;
        break;
      }

      // repeated .wire.Team Teams = 2;
      case 2: {
        if (tag == 18) {
         parse_Teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Teams;
        if (input->ExpectTag(26)) goto parse_Problems;
        break;
      }

      // repeated .wire.Problem Problems = 3;
      case 3: {
        if (tag == 26) {
         parse_Problems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_problems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Problems;
        if (input->ExpectTag(32)) goto parse_Start;
        break;
      }

      // required int64 Start = 4;
      case 4: {
        if (tag == 32) {
         parse_Start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wire.ContestSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wire.ContestSetup)
  return false;
#undef DO_
}

void ContestSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wire.ContestSetup)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .wire.Team Teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  // repeated .wire.Problem Problems = 3;
  for (int i = 0; i < this->problems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->problems(i), output);
  }

  // required int64 Start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wire.ContestSetup)
}

::google::protobuf::uint8* ContestSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wire.ContestSetup)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .wire.Team Teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  // repeated .wire.Problem Problems = 3;
  for (int i = 0; i < this->problems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->problems(i), target);
  }

  // required int64 Start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wire.ContestSetup)
  return target;
}

int ContestSetup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 Start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start());
    }

  }
  // repeated .wire.Team Teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .wire.Problem Problems = 3;
  total_size += 1 * this->problems_size();
  for (int i = 0; i < this->problems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->problems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContestSetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContestSetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContestSetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContestSetup::MergeFrom(const ContestSetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  problems_.MergeFrom(from.problems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContestSetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContestSetup::CopyFrom(const ContestSetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContestSetup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->teams())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->problems())) return false;
  return true;
}

void ContestSetup::Swap(ContestSetup* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    teams_.Swap(&other->teams_);
    problems_.Swap(&other->problems_);
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContestSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContestSetup_descriptor_;
  metadata.reflection = ContestSetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Problem::kIdFieldNumber;
const int Problem::kLabelFieldNumber;
const int Problem::kColorFieldNumber;
#endif  // !_MSC_VER

Problem::Problem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wire.Problem)
}

void Problem::InitAsDefaultInstance() {
}

Problem::Problem(const Problem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wire.Problem)
}

void Problem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Problem::~Problem() {
  // @@protoc_insertion_point(destructor:wire.Problem)
  SharedDtor();
}

void Problem::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete color_;
  }
  if (this != default_instance_) {
  }
}

void Problem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Problem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Problem_descriptor_;
}

const Problem& Problem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scoreboard_2eproto();
  return *default_instance_;
}

Problem* Problem::default_instance_ = NULL;

Problem* Problem::New() const {
  return new Problem;
}

void Problem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    if (has_color()) {
      if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        color_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Problem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wire.Problem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Label;
        break;
      }

      // required string Label = 2;
      case 2: {
        if (tag == 18) {
         parse_Label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Color;
        break;
      }

      // optional string Color = 3;
      case 3: {
        if (tag == 26) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wire.Problem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wire.Problem)
  return false;
#undef DO_
}

void Problem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wire.Problem)
  // required int64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string Label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional string Color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wire.Problem)
}

::google::protobuf::uint8* Problem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wire.Problem)
  // required int64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required string Label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional string Color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wire.Problem)
  return target;
}

int Problem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required string Label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string Color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Problem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Problem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Problem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Problem::MergeFrom(const Problem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Problem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Problem::CopyFrom(const Problem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Problem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Problem::Swap(Problem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Problem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Problem_descriptor_;
  metadata.reflection = Problem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team::kIdFieldNumber;
const int Team::kNameFieldNumber;
#endif  // !_MSC_VER

Team::Team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wire.Team)
}

void Team::InitAsDefaultInstance() {
}

Team::Team(const Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wire.Team)
}

void Team::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team::~Team() {
  // @@protoc_insertion_point(destructor:wire.Team)
  SharedDtor();
}

void Team::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_descriptor_;
}

const Team& Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scoreboard_2eproto();
  return *default_instance_;
}

Team* Team::default_instance_ = NULL;

Team* Team::New() const {
  return new Team;
}

void Team::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wire.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wire.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wire.Team)
  return false;
#undef DO_
}

void Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wire.Team)
  // required int64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wire.Team)
}

::google::protobuf::uint8* Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wire.Team)
  // required int64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wire.Team)
  return target;
}

int Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team::MergeFrom(const Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team::CopyFrom(const Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Team::Swap(Team* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_descriptor_;
  metadata.reflection = Team_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wire

// @@protoc_insertion_point(global_scope)
