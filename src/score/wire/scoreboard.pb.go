// Code generated by protoc-gen-go.
// source: scoreboard.proto
// DO NOT EDIT!

/*
Package wire is a generated protocol buffer package.

It is generated from these files:
	scoreboard.proto

It has these top-level messages:
	Message
	Event
	ContestSetup
	Problem
	Team
*/
package wire

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SState int32

const (
	SState_CORRECT SState = 1
	SState_WRONG   SState = 2
	SState_PENDING SState = 3
	SState_FIRST   SState = 4
)

var SState_name = map[int32]string{
	1: "CORRECT",
	2: "WRONG",
	3: "PENDING",
	4: "FIRST",
}
var SState_value = map[string]int32{
	"CORRECT": 1,
	"WRONG":   2,
	"PENDING": 3,
	"FIRST":   4,
}

func (x SState) Enum() *SState {
	p := new(SState)
	*p = x
	return p
}
func (x SState) String() string {
	return proto.EnumName(SState_name, int32(x))
}
func (x *SState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SState_value, data, "SState")
	if err != nil {
		return err
	}
	*x = SState(value)
	return nil
}
func (SState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Message struct {
	// Types that are valid to be assigned to MessageType:
	//	*Message_Event
	//	*Message_Setup
	//	*Message_HeartBeat
	//	*Message_Unfreeze
	MessageType      isMessage_MessageType `protobuf_oneof:"MessageType"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_MessageType interface {
	isMessage_MessageType()
}

type Message_Event struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,oneof"`
}
type Message_Setup struct {
	Setup *ContestSetup `protobuf:"bytes,2,opt,name=setup,oneof"`
}
type Message_HeartBeat struct {
	HeartBeat int64 `protobuf:"varint,3,opt,name=HeartBeat,oneof"`
}
type Message_Unfreeze struct {
	Unfreeze bool `protobuf:"varint,4,opt,name=unfreeze,oneof"`
}

func (*Message_Event) isMessage_MessageType()     {}
func (*Message_Setup) isMessage_MessageType()     {}
func (*Message_HeartBeat) isMessage_MessageType() {}
func (*Message_Unfreeze) isMessage_MessageType()  {}

func (m *Message) GetMessageType() isMessage_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (m *Message) GetEvent() *Event {
	if x, ok := m.GetMessageType().(*Message_Event); ok {
		return x.Event
	}
	return nil
}

func (m *Message) GetSetup() *ContestSetup {
	if x, ok := m.GetMessageType().(*Message_Setup); ok {
		return x.Setup
	}
	return nil
}

func (m *Message) GetHeartBeat() int64 {
	if x, ok := m.GetMessageType().(*Message_HeartBeat); ok {
		return x.HeartBeat
	}
	return 0
}

func (m *Message) GetUnfreeze() bool {
	if x, ok := m.GetMessageType().(*Message_Unfreeze); ok {
		return x.Unfreeze
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Event)(nil),
		(*Message_Setup)(nil),
		(*Message_HeartBeat)(nil),
		(*Message_Unfreeze)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// MessageType
	switch x := m.MessageType.(type) {
	case *Message_Event:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Event); err != nil {
			return err
		}
	case *Message_Setup:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Setup); err != nil {
			return err
		}
	case *Message_HeartBeat:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.HeartBeat))
	case *Message_Unfreeze:
		t := uint64(0)
		if x.Unfreeze {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Message.MessageType has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 1: // MessageType.event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event)
		err := b.DecodeMessage(msg)
		m.MessageType = &Message_Event{msg}
		return true, err
	case 2: // MessageType.setup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContestSetup)
		err := b.DecodeMessage(msg)
		m.MessageType = &Message_Setup{msg}
		return true, err
	case 3: // MessageType.HeartBeat
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.MessageType = &Message_HeartBeat{int64(x)}
		return true, err
	case 4: // MessageType.unfreeze
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.MessageType = &Message_Unfreeze{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// MessageType
	switch x := m.MessageType.(type) {
	case *Message_Event:
		s := proto.Size(x.Event)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Setup:
		s := proto.Size(x.Setup)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_HeartBeat:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HeartBeat))
	case *Message_Unfreeze:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event struct {
	Team             *int64  `protobuf:"varint,6,req,name=Team" json:"Team,omitempty"`
	Problem          *int64  `protobuf:"varint,1,req,name=Problem" json:"Problem,omitempty"`
	SubmitCount      *int64  `protobuf:"varint,2,req,name=SubmitCount" json:"SubmitCount,omitempty"`
	Penalty          *int64  `protobuf:"varint,3,req,name=Penalty" json:"Penalty,omitempty"`
	ContestTime      *int64  `protobuf:"varint,7,opt,name=ContestTime" json:"ContestTime,omitempty"`
	State            *SState `protobuf:"varint,4,req,name=State,enum=wire.SState" json:"State,omitempty"`
	Unfrozen         *Event  `protobuf:"bytes,5,opt,name=Unfrozen" json:"Unfrozen,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetTeam() int64 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *Event) GetProblem() int64 {
	if m != nil && m.Problem != nil {
		return *m.Problem
	}
	return 0
}

func (m *Event) GetSubmitCount() int64 {
	if m != nil && m.SubmitCount != nil {
		return *m.SubmitCount
	}
	return 0
}

func (m *Event) GetPenalty() int64 {
	if m != nil && m.Penalty != nil {
		return *m.Penalty
	}
	return 0
}

func (m *Event) GetContestTime() int64 {
	if m != nil && m.ContestTime != nil {
		return *m.ContestTime
	}
	return 0
}

func (m *Event) GetState() SState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return SState_CORRECT
}

func (m *Event) GetUnfrozen() *Event {
	if m != nil {
		return m.Unfrozen
	}
	return nil
}

type ContestSetup struct {
	Name             *string    `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	Teams            []*Team    `protobuf:"bytes,2,rep,name=Teams" json:"Teams,omitempty"`
	Problems         []*Problem `protobuf:"bytes,3,rep,name=Problems" json:"Problems,omitempty"`
	Start            *int64     `protobuf:"varint,4,req,name=Start" json:"Start,omitempty"`
	End              *int64     `protobuf:"varint,5,req,name=End" json:"End,omitempty"`
	SimulatedStart   *int64     `protobuf:"varint,6,opt,name=SimulatedStart" json:"SimulatedStart,omitempty"`
	SimulationSpeed  *float64   `protobuf:"fixed64,7,opt,name=SimulationSpeed" json:"SimulationSpeed,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ContestSetup) Reset()                    { *m = ContestSetup{} }
func (m *ContestSetup) String() string            { return proto.CompactTextString(m) }
func (*ContestSetup) ProtoMessage()               {}
func (*ContestSetup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContestSetup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ContestSetup) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *ContestSetup) GetProblems() []*Problem {
	if m != nil {
		return m.Problems
	}
	return nil
}

func (m *ContestSetup) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *ContestSetup) GetEnd() int64 {
	if m != nil && m.End != nil {
		return *m.End
	}
	return 0
}

func (m *ContestSetup) GetSimulatedStart() int64 {
	if m != nil && m.SimulatedStart != nil {
		return *m.SimulatedStart
	}
	return 0
}

func (m *ContestSetup) GetSimulationSpeed() float64 {
	if m != nil && m.SimulationSpeed != nil {
		return *m.SimulationSpeed
	}
	return 0
}

type Problem struct {
	Id               *int64  `protobuf:"varint,1,req,name=Id" json:"Id,omitempty"`
	Label            *string `protobuf:"bytes,2,req,name=Label" json:"Label,omitempty"`
	Color            *string `protobuf:"bytes,3,opt,name=Color" json:"Color,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Problem) Reset()                    { *m = Problem{} }
func (m *Problem) String() string            { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()               {}
func (*Problem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Problem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Problem) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Problem) GetColor() string {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return ""
}

type Team struct {
	Id               *int64  `protobuf:"varint,1,req,name=Id" json:"Id,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"`
	Affiliation      *string `protobuf:"bytes,3,opt,name=Affiliation" json:"Affiliation,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (m *Team) String() string            { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Team) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Team) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Team) GetAffiliation() string {
	if m != nil && m.Affiliation != nil {
		return *m.Affiliation
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "wire.Message")
	proto.RegisterType((*Event)(nil), "wire.Event")
	proto.RegisterType((*ContestSetup)(nil), "wire.ContestSetup")
	proto.RegisterType((*Problem)(nil), "wire.Problem")
	proto.RegisterType((*Team)(nil), "wire.Team")
	proto.RegisterEnum("wire.SState", SState_name, SState_value)
}

var fileDescriptor0 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x6b, 0x3b, 0x4e, 0xe2, 0x71, 0xd2, 0x46, 0x5b, 0x09, 0x8c, 0x00, 0x51, 0x99, 0x4b,
	0xc4, 0x21, 0x87, 0x22, 0x24, 0xae, 0xd4, 0x04, 0x12, 0x09, 0xd2, 0x2a, 0x36, 0xe2, 0xbc, 0xc1,
	0x13, 0x64, 0xc9, 0xf6, 0x5a, 0xeb, 0x35, 0xa8, 0x3d, 0xf3, 0x35, 0x38, 0xf2, 0x3d, 0x99, 0xfd,
	0x43, 0x05, 0xe2, 0xb8, 0x6f, 0xde, 0x78, 0x7e, 0xef, 0x19, 0x16, 0xfd, 0x17, 0x21, 0xf1, 0x20,
	0xb8, 0x2c, 0x57, 0x9d, 0x14, 0x4a, 0xb0, 0xd1, 0xf7, 0x4a, 0x62, 0xfa, 0xc3, 0x83, 0xc9, 0x47,
	0xec, 0x7b, 0xfe, 0x15, 0xd9, 0x13, 0x08, 0xf1, 0x1b, 0xb6, 0x2a, 0xf1, 0x2e, 0xbc, 0x65, 0x7c,
	0x19, 0xaf, 0xb4, 0x63, 0xb5, 0xd6, 0xd2, 0xe6, 0x84, 0x3d, 0x87, 0xb0, 0x47, 0x35, 0x74, 0x89,
	0x6f, 0xa6, 0xcc, 0x4e, 0x33, 0xd1, 0x2a, 0xec, 0x55, 0xae, 0x27, 0x64, 0x3a, 0x87, 0x68, 0x83,
	0x5c, 0xaa, 0x2b, 0xe4, 0x2a, 0x09, 0xc8, 0x18, 0x90, 0xc8, 0x60, 0x3a, 0xb4, 0x47, 0x89, 0x78,
	0x87, 0xc9, 0x88, 0xb4, 0xe9, 0xe6, 0xe4, 0x6a, 0x0e, 0xb1, 0x3b, 0x5b, 0xdc, 0x76, 0x98, 0xfe,
	0xf4, 0x20, 0x34, 0x87, 0xd8, 0x0c, 0x46, 0x05, 0xf2, 0x26, 0x19, 0x5f, 0xf8, 0xcb, 0x80, 0x9d,
	0xc1, 0xe4, 0x46, 0x8a, 0x43, 0x8d, 0x0d, 0x41, 0x69, 0xe1, 0x1c, 0xe2, 0x7c, 0x38, 0x34, 0x95,
	0xca, 0xc4, 0x40, 0xa4, 0xfe, 0xbd, 0x0b, 0x5b, 0x5e, 0xab, 0x5b, 0xba, 0xe9, 0x5c, 0x0e, 0xac,
	0xa8, 0x1a, 0x4c, 0x26, 0x1a, 0x84, 0x3d, 0x86, 0x30, 0x57, 0x5c, 0x69, 0x06, 0x7f, 0x79, 0x7a,
	0x39, 0xb3, 0x01, 0x72, 0xa3, 0xb1, 0xa7, 0x30, 0xfd, 0x44, 0x8c, 0xe2, 0x0e, 0xdb, 0x24, 0xfc,
	0x2f, 0x7e, 0xfa, 0xcb, 0x83, 0xd9, 0xdf, 0x51, 0x35, 0xe6, 0x8e, 0xd3, 0xa7, 0x35, 0x55, 0xc4,
	0x1e, 0x41, 0xa8, 0xa1, 0x7b, 0xe2, 0x09, 0x68, 0x15, 0xec, 0xaa, 0x96, 0xd8, 0x33, 0x98, 0xba,
	0x04, 0x3d, 0xc1, 0xe9, 0xe9, 0xdc, 0x4e, 0x9d, 0xca, 0xe6, 0x06, 0x4b, 0x2a, 0x83, 0x15, 0xb0,
	0x18, 0x82, 0x75, 0x5b, 0x12, 0x83, 0x7e, 0x3c, 0x80, 0xd3, 0xbc, 0x6a, 0x86, 0x9a, 0x08, 0x4b,
	0x6b, 0x1a, 0x9b, 0x28, 0x0f, 0xe1, 0xcc, 0xe9, 0x95, 0x68, 0xf3, 0x0e, 0xb1, 0x34, 0x19, 0xbd,
	0xf4, 0xe5, 0x7d, 0x5f, 0x0c, 0xc0, 0xdf, 0x96, 0xae, 0x35, 0xba, 0xf1, 0x81, 0x1f, 0xb0, 0x36,
	0x7d, 0x45, 0xfa, 0x99, 0x89, 0x5a, 0x48, 0xf3, 0x87, 0xa2, 0xf4, 0x95, 0xad, 0xfc, 0x9f, 0x8d,
	0x3f, 0xf9, 0xec, 0x02, 0xf5, 0xf9, 0xe6, 0x78, 0xac, 0xea, 0xca, 0x1c, 0xb4, 0x6b, 0x2f, 0x5e,
	0xc3, 0xd8, 0x95, 0x17, 0xc3, 0x24, 0xbb, 0xde, 0xef, 0xd7, 0x59, 0xb1, 0xf0, 0x58, 0x04, 0xe1,
	0xe7, 0xfd, 0xf5, 0xee, 0xfd, 0xc2, 0xd7, 0xfa, 0xcd, 0x7a, 0xf7, 0x76, 0x4b, 0x8f, 0x40, 0xeb,
	0xef, 0xb6, 0xfb, 0xbc, 0x58, 0x8c, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xec, 0xc5, 0xad, 0xdc,
	0x8d, 0x02, 0x00, 0x00,
}
